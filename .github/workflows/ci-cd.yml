name: Simple CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests with coverage
      run: |
        python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing
      continue-on-error: true

    - name: Test data validation functionality
      run: |
        echo "Testing validator functionality..."
        python -c "
        from src.validator import DataValidator
        import sys
        
        print('=' * 50)
        print('VALIDATION FUNCTIONALITY TEST')
        print('=' * 50)
        
        try:
            # Test valid data
            print('Testing valid data file...')
            validator = DataValidator('tests/test_data/valid_data.json')
            result = validator.validate()
            valid_test_passed = result['is_valid']
            print(f'‚úì Valid data test: {\"PASSED\" if valid_test_passed else \"FAILED\"}')
            print(f'  - Valid entries: {result[\"summary\"][\"total_valid\"]}')
            print(f'  - Errors: {result[\"summary\"][\"total_errors\"]}')
            
            # Test invalid data
            print('\\nTesting invalid data file...')
            validator = DataValidator('tests/test_data/invalid_data.json')
            result = validator.validate()
            invalid_test_passed = not result['is_valid']
            print(f'‚úì Invalid data test: {\"PASSED\" if invalid_test_passed else \"FAILED\"}')
            print(f'  - Valid entries: {result[\"summary\"][\"total_valid\"]}')
            print(f'  - Errors detected: {result[\"summary\"][\"total_errors\"]}')
            
            # Show some error examples
            if result['errors']:
                print('\\n  Sample errors detected:')
                for i, error in enumerate(result['errors'][:3]):
                    print(f'    {i+1}. {error}')
                if len(result['errors']) > 3:
                    print(f'    ... and {len(result[\"errors\"]) - 3} more errors')
            
            print('\\n' + '=' * 50)
            
            # Exit with appropriate code
            if valid_test_passed and invalid_test_passed:
                print('‚úì All validation tests PASSED')
                sys.exit(0)
            else:
                print('‚úó Some validation tests FAILED')
                sys.exit(1)
                
        except Exception as e:
            print(f'‚úó Error during validation testing: {e}')
            sys.exit(1)
        "

    - name: Build project (simulate build process)
      run: |
        echo "Building project..."
        
        # Create a simple build directory
        mkdir -p build
        
        # Copy source files to build directory
        cp -r src/ build/
        
        # Create a simple package structure
        echo "from .validator import DataValidator" > build/src/__init__.py
        echo "from .report import ValidationReport" >> build/src/__init__.py
        echo "from .utils import *" >> build/src/__init__.py
        
        # Test if the build works
        cd build
        python -c "
        import sys
        sys.path.insert(0, '.')
        try:
            from src import DataValidator, ValidationReport
            print('‚úì Build successful - All modules can be imported')
        except ImportError as e:
            print(f'‚úó Build failed - Import error: {e}')
            sys.exit(1)
        "
        
        echo "‚úì Build completed successfully"

    - name: Generate test report
      if: always()
      run: |
        mkdir -p reports
        
        echo "Generating comprehensive test report..."
        python -c "
        from src.validator import DataValidator
        from datetime import datetime
        import os
        
        # Generate detailed test report
        report_lines = []
        report_lines.append('=' * 60)
        report_lines.append('DATA VALIDATOR - TEST EXECUTION REPORT')
        report_lines.append('=' * 60)
        report_lines.append(f'Report generated: {datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")}')

        # Test 1: Valid data
        report_lines.append('TEST 1: Valid Data Validation')
        report_lines.append('-' * 30)
        try:
            validator = DataValidator('tests/test_data/valid_data.json')
            result = validator.validate()
            report_lines.append(f'Status: {\"PASSED\" if result[\"is_valid\"] else \"FAILED\"}')
            report_lines.append(f'Total entries processed: {result[\"summary\"][\"total_entries\"]}')
            report_lines.append(f'Valid entries: {result[\"summary\"][\"total_valid\"]}')
            report_lines.append(f'Errors found: {result[\"summary\"][\"total_errors\"]}')
        except Exception as e:
            report_lines.append(f'Status: ERROR - {str(e)}')
        
        report_lines.append('')
        
        # Test 2: Invalid data
        report_lines.append('TEST 2: Invalid Data Detection')
        report_lines.append('-' * 30)
        try:
            validator = DataValidator('tests/test_data/invalid_data.json')
            result = validator.validate()
            report_lines.append(f'Status: {\"PASSED\" if not result[\"is_valid\"] else \"FAILED\"}')
            report_lines.append(f'Total entries processed: {result[\"summary\"][\"total_entries\"]}')
            report_lines.append(f'Valid entries: {result[\"summary\"][\"total_valid\"]}')
            report_lines.append(f'Errors detected: {result[\"summary\"][\"total_errors\"]}')
            
            if result['errors']:
                report_lines.append('')
                report_lines.append('Error Details:')
                for i, error in enumerate(result['errors'], 1):
                    report_lines.append(f'  {i}. {error}')
                    
        except Exception as e:
            report_lines.append(f'Status: ERROR - {str(e)}')
        
        report_lines.append('')
        report_lines.append('=' * 60)
        report_lines.append('END OF REPORT')
        report_lines.append('=' * 60)
        
        # Save report
        with open('reports/test_execution_report.txt', 'w') as f:
            f.write('\\n'.join(report_lines))
        
        # Display report
        print('\\n'.join(report_lines))
        "

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports
        path: |
          reports/
          htmlcov/
          coverage.xml

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: build-output
        path: build/

    - name: Display summary
      if: always()
      run: |
        echo ""
        echo "üöÄ CI Pipeline Summary"
        echo "====================="
        echo "‚úì Dependencies installed"
        echo "‚úì Tests executed"
        echo "‚úì Build process completed"
        echo "‚úì Reports generated"
        echo ""
        echo "üìä Artifacts uploaded:"
        echo "  - Test reports and coverage"
        echo "  - Build output (if successful)"
        echo ""
        echo "üìÅ Check the 'Actions' tab for downloadable artifacts"